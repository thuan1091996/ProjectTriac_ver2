;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Project_Triac_PWM
;Version : v1.0
;Date    : 7/30/2018
;Author  : Tran Minh Thuan
;Company : Viet Mold Machine
;Comments:
;PC0, PC1 - Input-  control button
;PC2,PC3,PC4 -  Output - 74595 operation
;PD2 - Exteral interrupt
;PB5, PB3 - Input -  Power button
;(All buttons are pulled-up)
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define SIGNAL      PORTB.1
;#define SW_EMER     PINB.3
;#define SW_ON       PINB.5
;#define SW_GIAM     PINC.1
;#define SW_TANG     PINC.0
;#define STR         PORTC.2
;#define CLK         PORTC.3
;#define SDI         PORTC.4
;#define LED         PORTC.5
;
;/* ------Cac dinh nghia ve chuong trinh va cac bien--------*/
;//-----------------------------------------------------------
;//Dinh nghia cac bien toan cuc
;unsigned int    count=0;                   //Bien dem gia tri delay
;unsigned int    T_delay=0;                 //Tang 1 moi khi ngat timer0 (100us)
;unsigned int    T_shift_delay=0;           //Dich de ve diem 0
;unsigned char   Status=1;                  //Vua bat nguon thi he thong se hoat dong
;unsigned int    Load=0;
;unsigned char   MA_7SEG[10]={0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};

	.DSEG
;//Dinh nghia cac chuong trinh
;void INT0_INIT(void);                   //Khoi tao cho ngat ngoai
;void Timer_INIT(void);                  //Khoi tao thong so va ngat cho Timer0
;void GPIO_INIT(void);                   //Khoi tao cac input, output
;void Delay_100us(unsigned int Time);    //Delay 100us ung voi moi don vi
;void Display();                         //Hien thi gia tri ra 7segs
;void CheckSW(void);                     //Doc gia tri nut nhan
;void Power_Check(void);                 //Check nut nhan nguon
;void Disable_PWM(void);                 //Tat PWM Timer1
;void Enable_PWM(void);                  //Mo  PWM Timer1
;int  Wait_Shift(void);                  //Doi de shift toi muc 0
;void LoadValue();
;
;/*---------------------Interrupt Service Routine-----------*/
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0042 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0043     // Reinitialize Timer 0 value
; 0000 0044     T_delay++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0045     TCNT0=0x9C;    //Tinh toan = 0x9C (100), nhung bu sai so nen A0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0046 };
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;// Timer 1 reach top value (capture) interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0000 0049 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 004A     Disable_PWM();
;PCODE: $00000019 VOL: 0
; 0000 004B     TIMSK=(0<<TOIE2);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 004C };
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;// Timer 2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 004F {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0050     // Reinitialize Timer2 value
; 0000 0051     TCNT2=0x9C;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0052     if(Wait_Shift()==1)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0053     {
; 0000 0054         Enable_PWM();
;PCODE: $00000026 VOL: 0
; 0000 0055         TIMSK=(0<<TOIE2);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0056     }
; 0000 0057     else
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0058     T_shift_delay++;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0059 
; 0000 005A };
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 005C {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005D     T_shift_delay=0;
;PCODE: $00000034 VOL: 0
; 0000 005E     TIMSK=(1<<TOIE2);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 005F };
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;/*------------------------------------------------------------*/
;/*-------------------Mandatory program------------------------*/
;void main(void)
; 0000 0063 {
;PCODE: $0000003A VOL: 0
; 0000 0064 // Global enable interrupts
; 0000 0065 #asm("sei")
;PCODE: $0000003B VOL: 0
	sei
;PCODE: $0000003C VOL: 0
; 0000 0066 GPIO_INIT();    //GPIO Initialization
;PCODE: $0000003D VOL: 0
; 0000 0067 Timer_INIT();   //Timer 0 delay100us, Timer1 Fast PWM Initialization
;PCODE: $0000003E VOL: 0
; 0000 0068 INT0_INIT();    //External Rising Edge interrupt Initialization
;PCODE: $0000003F VOL: 0
; 0000 0069 while (1)
;PCODE: $00000040 VOL: 0
; 0000 006A       {
; 0000 006B       Power_Check();
;PCODE: $00000041 VOL: 0
; 0000 006C       CheckSW();
;PCODE: $00000042 VOL: 0
; 0000 006D       Display();
;PCODE: $00000043 VOL: 0
; 0000 006E       }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 006F };
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;/*--------------Cac chuong trinh con--------------------*/
;void INT0_INIT(void)     //TEST DONE
; 0000 0072 {
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0073     // External Interrupt(s) initialization
; 0000 0074     // INT0: On
; 0000 0075     // INT0 Mode: Rising Edge
; 0000 0076     // INT1: Off
; 0000 0077     GICR|=(0<<INT1) | (1<<INT0);                                //Enable interrupt
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0078     MCUCR=(0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (1<<ISC00);    //Rising edge
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0079     GIFR=(0<<INTF1) | (1<<INTF0);                               //Clear the flag
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007A };
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;//////////////////////////////////////////////////////////
;void Timer_INIT(void)    //TEST DONE
; 0000 007D {
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007E //----------------Timer0--------------------------------//
; 0000 007F     // Timer/Counter 0 initialization
; 0000 0080     // Clock source: System Clock
; 0000 0081     // Clock value: 8000.000 kHz
; 0000 0082     // Prescaler: 8
; 0000 0083     TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);  //Prescaler - 8
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0084     TCNT0=0x9C;                               // 100us
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0085 //----------------Timer1--------------------------------//
; 0000 0086     // Timer/Counter 1 initialization
; 0000 0087     // Clock source: System Clock
; 0000 0088     // Clock value: 8000.000 kHz
; 0000 0089     // Mode: Fast PWM top=ICR1
; 0000 008A     // OC1A output: Inverted PWM
; 0000 008B     // OC1B output: Disconnected
; 0000 008C     // Noise Canceler: Off
; 0000 008D     // Input Capture on Falling Edge
; 0000 008E     // Timer Period: 8 ms
; 0000 008F     // Output Pulse(s):
; 0000 0090     // OC1A Period: 8 ms Width: 3.9999 ms
; 0000 0091     // Timer1 Overflow Interrupt: Off
; 0000 0092     // Input Capture Interrupt: On
; 0000 0093     // Compare A Match Interrupt: Off
; 0000 0094     // Compare B Match Interrupt: Off
; 0000 0095 //    TCCR1A=(1<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
; 0000 0096 //    TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
; 0000 0097 //    ICR1H=0xF9FF>> 8;           //Top value
; 0000 0098 //    ICR1L=0xF9FF& 0xFF;
; 0000 0099 //    OCR1AH=0>> 8;          //Count value
; 0000 009A //    OCR1AL=0& 0xFF;
; 0000 009B //----------------Timer2--------------------------------//
; 0000 009C     // Timer/Counter 2 initialization
; 0000 009D     // Clock source: System Clock
; 0000 009E     // Clock value: 8000.000 kHz
; 0000 009F     // Mode: Normal top=0xFF
; 0000 00A0     // OC2 output: Disconnected
; 0000 00A1     // Timer Period: 0.1 ms
; 0000 00A2     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (1<<CS21) | (0<<CS20);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00A3     TCNT2=0x9C;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00A4 
; 0000 00A5 };
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;///////////////////////////////////////////////////////////
;void GPIO_INIT(void)     //TEST DONE
; 0000 00A8 {
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00A9     // Input/Output Ports initialization
; 0000 00AA     // Port B initialization
; 0000 00AB     // Function: Bit7=Out Bit6=Out Bit5=In Bit4=Out Bit3=IN Bit2=Out Bit1=Out Bit0=Out
; 0000 00AC     DDRB=(1<<DDB7) | (1<<DDB6) | (0<<DDB5) | (1<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00AD     // State: Bit7=0 Bit6=0 Bit5=1 Bit4=0 Bit3=1 Bit2=0 Bit1=0 Bit0=0
; 0000 00AE     PORTB=(0<<PORTB7) | (0<<PORTB6) | (1<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00AF 
; 0000 00B0     // Port C initialization
; 0000 00B1     // Function: Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 00B2     DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00B3     // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=1 Bit0=1
; 0000 00B4     PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00B5 
; 0000 00B6     // Port D initialization
; 0000 00B7     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00B8     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00B9     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00BA     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00BB };
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;///////////////////////////////////////////////////////////
;int Wait_Shift(void)     //TEST DONE
; 0000 00BE {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00BF     if(T_shift_delay>=10)            //sau 8*80us ve diem 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00C0     return 1;                       //Ve diem 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00C1     else                            //Chua ve diem 0
;PCODE: $00000077 VOL: 0
; 0000 00C2     return 0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00C3 };
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;///////////////////////////////////////////////////////////
;void Delay_100us(unsigned int Time)  //TEST DONE
; 0000 00C6 {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00C7 /* Create delay function with 100us corresponding to each value */
; 0000 00C8     TCNT0=0x9D;         //Tinh toan = 0x9D, nhung bu sai so nen A0
;PCODE: $0000007F VOL: 0
;	Time -> Y+0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00C9     TIMSK|=0x01;        //Cho phep ngat tran timer0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00CA     T_delay=0;          //Reset gia tri dem
;PCODE: $00000085 VOL: 0
; 0000 00CB     while(T_delay<Time);//Chua du
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CC     TIMSK&=~0x01;       //Du thoi gian, tat ngat tran timer0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CD };
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;///////////////////////////////////////////////////////////
;void CheckSW(void)  //TEST DONE
; 0000 00D0 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00D1     if(!SW_GIAM)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D2     {
; 0000 00D3         Delay_100us(200);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00D4         if(count>0) count--;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D5         else        count=0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D6     }
;PCODE: $000000A2 VOL: 0
; 0000 00D7     if(!SW_TANG)
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D8     {
; 0000 00D9         Delay_100us(200);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00DA         if(count<99) count++;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00DB         else         count=99;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00DC     }
;PCODE: $000000B4 VOL: 0
; 0000 00DD };
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;///////////////////////////////////////////////////////////
;void Display()  //TEST DONE
; 0000 00E0 {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E1     unsigned char i,Q;
; 0000 00E2     unsigned char Dvi,Chuc;
; 0000 00E3     Dvi=MA_7SEG[(count)%10];
;PCODE: $000000BA VOL: 0
;	i -> R17
;	Q -> R16
;	Dvi -> R19
;	Chuc -> R18
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00E4     Chuc=MA_7SEG[(count)/10];
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E5     Q=Chuc; for(i=0;i<8;i++){SDI=Q&0x80;CLK=0;CLK=1;Q<<=1;}
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E6     Q=Dvi; for(i=0;i<8;i++){SDI=Q&0x80;CLK=0;CLK=1;Q<<=1;}
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00E7     STR=0; STR=1;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00E8 };
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;///////////////////////////////////////////////////////////
;void Power_Check(void) //Test done
; 0000 00EB {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00EC /* Check the power button to allow system operating normally
; 0000 00ED SW_EMER - Emergency switch if this button was switched on (=0), lock the output signal
; 0000 00EE SW_ON - On/Off button, if this button was pressed toggle on/off the output signal
; 0000 00EF Status =0 -> Signal was disable
; 0000 00F0 Status = 1 -> Signal was enable
; 0000 00F1 */
; 0000 00F2     if(SW_EMER==0)                          //LOCK
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F3         {
; 0000 00F4             Status=0;                       //Signal disable
;PCODE: $00000110 VOL: 0
; 0000 00F5             Delay_100us(5000);              //Wait for bound
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00F6             if(SW_EMER==1)                  //UNLOCK
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00F7             Status=1;                       //Signal enable
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00F8         }
;PCODE: $00000118 VOL: 0
; 0000 00F9     else
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00FA         {
; 0000 00FB             if(SW_ON==0)                    //Switch press toggle the power
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00FC                 {
; 0000 00FD                     Delay_100us(5000);      //Wait for bound
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00FE                     Status=(Status+1)%2;    //Toggle
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00FF                 }
; 0000 0100         }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 0101     if(Status==1) {LED=0; DDRB|=0x02;}      //System ON, on LED and enable SIGNAL
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0102     else          {LED=1; DDRB&=~0x02;}     //System OFF, Off LED and disable SIGNAL
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0103 };
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;///////////////////////////////////////////////////////////
;void Disable_PWM(void)
; 0000 0106 {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0107     TCCR1B=(0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0108     TIMSK=(0<<TICIE1);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0109     SIGNAL=0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 010A };
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;///////////////////////////////////////////////////////////
;void Enable_PWM(void)
; 0000 010D {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 010E     TCCR1A=(1<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 010F     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 0110     TIMSK=(1<<TICIE1);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 0111     Load=(count*(0xF9FF))/100;
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0112     ICR1H=0xF9FF>> 8;           //Top value
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0113     ICR1L=0xF9FF& 0xFF;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 0114     OCR1AH=Load>> 8;          //Count value
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0115     OCR1AL=Load& 0xFF;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0116 };
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;/*--------------------------------------------------------*/
